struct CityServer {
  uint8_t num; // Номер платы, у каждой команды свой номер, который соответствует номеру полигона, номер полигона можно просмотреть на ФОТО.
  IPAddress boardIP; // IP-адрес платы в локальной сети.
  String DisctrictName;
  // Умные фонари
  bool LightEnable[4];  // Массив состояний 4 фонарей, расположение фонарей можно просмотреть на ФОТО, True - фонарь включен, False - фонарь выключен.
  bool LightEnable_FromServer[4]; // Массив для включение/выключение каждого фонаря в отдельности с городского сервера, параметр задается с городского сервера.
  int LightLevel; // Усредненное значение освещенности на районе.
  int LightLevel_FromServer; // Степень освещенности, задаваемая с городского сервера 0-100%.


  // Умный светофор
  byte TrafficCongestion_1; // усредненные данные о загруженности улицы "1" (машин в минуту)
  byte TrafficCongestion_2; // усредненные данные о загруженности улицы "2" (машин в минуту)

  byte EnablingSignalCongestion_1; // информация о статусе светофора для улицы "1"
  byte EnablingSignalCongestion_2; // информация о статусе светофора для улицы "2"
  // Требование к передачи статуса светофора. 0 - разрешающий сигнал светофора (зеленый), 1 - предупреждающий сигнал светофора (желтый), 2 - запрещающий сигнал светофора (красный) 

  byte TrafficLightStatus_FromServer; // ручное управление светофором для улицы "1" с городского сервера, со следующим описанием 0 - разрешающий сигнал светофора (зеленый), 1 - предупреждающий сигнал светофора (желтый), 2 - запрещающий сигнал светофора (красный), на противоположной улице активируется противоположный сигнал.


  // Умный шлагбаум
  int IndexDeviationIndex; // Индекс отлонения поезда от расписания, в секундах.
  bool RelocationStatus; // Состояние Ж/Д переезда, False - открыт, True - закрыт.
  bool RelocationStatus_FromServer; // Ручное управление Ж/Д переездом с городского сервера, 0 - открыт, 1 - закрыт. (Только с разрешающего сигнала)
  
  String TrainSchedule_FromServer; //Время прибытия поезда вида чч:мм:сс

  // Умная парковка
  bool ParkingOccupancy; // Занятость парковки, False - не занята, True - занята.
  byte ParkingChargeLevel; // Уровень заряда электрокара, стоящего на парковке от 0 до 100 %, если на парковке отсутствует электрокар, то передается 0.
  bool ParkingReservations; // Бронирование парковки, false - парковка не забронирована, True - парковка забронирована

  // Остальное
  String RecommendationsClothing; // Рекомендации по одежде.
  String RecommendationsPollution; // Рекомендации по воздержанию прибытия в микро-район.

  float TemperatureDistrict; // Температура воздуха в микро-районе.
  float HumidityDistrict; // Влажность воздуха в микро-районе.
  float PressureDistrict; // Атмсоферное давление в микро-районе.

  bool ModeDevice_FromSerser; // Флаг, разрешающий управлять устройствами с локального сервера False - автоматический режим, устройства работают в штатном режиме (управление с локального сервера), True - ручной режим, устройства подчинаются командам с городского сервера.
};